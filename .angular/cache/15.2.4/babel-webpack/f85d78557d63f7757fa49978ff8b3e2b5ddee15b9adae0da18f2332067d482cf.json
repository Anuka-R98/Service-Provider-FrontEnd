{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Chart, registerables } from 'node_modules/chart.js';\nChart.register(...registerables);\nlet SummaryComponent = class SummaryComponent {\n  constructor(userService, serviceService) {\n    this.userService = userService;\n    this.serviceService = serviceService;\n    this.labeldata = ['Admin', 'Users', 'Providers'];\n    this.realdata = [];\n    this.colordata = ['#E23E57', '#2ed12e', '#19A7CE'];\n    this.labeldata1 = ['Good', 'Normal', 'Bad'];\n    this.realdata1 = [];\n    this.colordata1 = ['#5bcfb4', '#cfb85b', '#cf5b61'];\n  }\n  ngOnInit() {\n    this.userChart();\n    this.serviceChart();\n  }\n  userChart() {\n    this.userService.getUsers().subscribe(response => {\n      this.chartdata = response;\n      console.log(response);\n      if (this.chartdata != null) {\n        let adminCount = 0;\n        let userCount = 0;\n        let providerCount = 0;\n        for (let i = 0; i < response.length; i++) {\n          if (this.chartdata[i].roles[0].name == 'ROLE_ADMIN') {\n            adminCount = adminCount + 1;\n          } else if (this.chartdata[i].roles[0].name == 'ROLE_SERVICE_PROVIDER') {\n            providerCount = providerCount + 1;\n          } else {\n            userCount = userCount + 1;\n          }\n        }\n        this.realdata.push(adminCount);\n        this.realdata.push(userCount);\n        this.realdata.push(providerCount);\n      }\n      this.RenderChart(this.labeldata, this.realdata, this.colordata, 'bar', 'barchart');\n      // this.RenderChart(this.labeldata,this.realdata,this.colordata,'pie','piechart');\n      // this.RenderChart(this.labeldata,this.realdata,this.colordata,'doughnut','dochart');\n      // this.RenderChart(this.labeldata,this.realdata,this.colordata,'polarArea','pochart');\n      // this.RenderChart(this.labeldata,this.realdata,this.colordata,'radar','rochart');\n    });\n  }\n\n  serviceChart() {\n    this.serviceService.getAllServices().subscribe(response => {\n      this.chartdata = response;\n      console.log(response);\n      if (this.chartdata != null) {\n        let good = 0;\n        let bad = 0;\n        let normal = 0;\n        for (let i = 0; i < response.length; i++) {\n          if (this.chartdata[i].averageRating >= 7.0) {\n            good = good + 1;\n          } else if (this.chartdata[i].averageRating >= 4) {\n            normal = normal + 1;\n          } else {\n            bad = bad + 1;\n          }\n        }\n        this.realdata1.push(good);\n        this.realdata1.push(normal);\n        this.realdata1.push(bad);\n      }\n      this.RenderChart(this.labeldata1, this.realdata1, this.colordata1, 'pie', 'piechart');\n    });\n  }\n  RenderChart(labeldata, maindata, colordata, type, id) {\n    const myChart = new Chart(id, {\n      type: type,\n      data: {\n        labels: labeldata,\n        datasets: [{\n          label: 'User types',\n          data: maindata,\n          backgroundColor: colordata,\n          borderColor: ['rgba(255, 99, 132, 1)'],\n          borderWidth: 1\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  }\n};\nSummaryComponent = __decorate([Component({\n  selector: 'app-summary',\n  templateUrl: './summary.component.html',\n  styleUrls: ['./summary.component.css']\n})], SummaryComponent);\nexport { SummaryComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}