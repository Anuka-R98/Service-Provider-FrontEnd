{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ServiceService = /*#__PURE__*/(() => {\n  class ServiceService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.PATH_OF_SERVICE = environment.apiBaseUrl + 'services';\n      this.PATH_OF_SERVICE_2 = environment.apiBaseUrl + 'admin/services';\n      this.PATH_OF_SERVICE_3 = environment.apiBaseUrl + 'provider/services';\n    }\n    getAllServices() {\n      return this.httpClient.get(`${this.PATH_OF_SERVICE}/all`);\n    }\n    getServiceById(id) {\n      return this.httpClient.get(`${this.PATH_OF_SERVICE}/id/${id}`);\n    }\n    createService(userId, service) {\n      const headers = new HttpHeaders({\n        'userId': userId\n      });\n      return this.httpClient.post(this.PATH_OF_SERVICE, service, {\n        headers\n      }).pipe(tap(response => {\n        console.log(response);\n      }), catchError(error => {\n        console.log(error);\n        return of(null);\n      }));\n    }\n    getAllServicesForUser(userId) {\n      const url = `${this.PATH_OF_SERVICE}/userid/${userId}`;\n      return this.httpClient.get(url).pipe(tap(response => {\n        console.log(response);\n      }), catchError(error => {\n        console.log(error);\n        return of(null);\n      }));\n    }\n    updateServiceByAdmin(id, service) {\n      return this.httpClient.put(`${this.PATH_OF_SERVICE_2}/${id}`, service);\n    }\n    updateService(id, service) {\n      return this.httpClient.put(`${this.PATH_OF_SERVICE_3}/${id}`, service);\n    }\n    deleteService(id) {\n      return this.httpClient.delete(`${this.PATH_OF_SERVICE}/${id}`);\n    }\n  }\n  ServiceService.ɵfac = function ServiceService_Factory(t) {\n    return new (t || ServiceService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ServiceService,\n    factory: ServiceService.ɵfac,\n    providedIn: 'root'\n  });\n  return ServiceService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}