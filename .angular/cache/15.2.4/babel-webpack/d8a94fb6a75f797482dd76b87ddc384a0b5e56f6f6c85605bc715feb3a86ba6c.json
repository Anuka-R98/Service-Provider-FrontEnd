{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { User } from '../../model/User';\nlet EditUserComponent = class EditUserComponent {\n  // custom validator function\n  matchPassword(control) {\n    const password = control.root.get('password');\n    const confirmPassword = control.value;\n    if (password && confirmPassword && password.value !== confirmPassword) {\n      return {\n        mismatchedPasswords: true\n      };\n    }\n    return null;\n  }\n  constructor(userService, userAuthService, toastr, router) {\n    this.userService = userService;\n    this.userAuthService = userAuthService;\n    this.toastr = toastr;\n    this.router = router;\n    this.user = new FormGroup({\n      username: new FormControl('', [Validators.required, Validators.minLength(3), Validators.maxLength(20)]),\n      email: new FormControl('', [Validators.required, Validators.pattern('[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$')]),\n      password: new FormControl('', [Validators.required, Validators.minLength(6), Validators.maxLength(12), Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[@$!%*?&])[A-Za-z\\\\d@$!%*?&]{6,30}$')]),\n      confirmPassword: new FormControl('', [Validators.required, Validators.minLength(6), Validators.maxLength(12), this.matchPassword.bind(this)]),\n      phoneNo: new FormControl('', [Validators.required, Validators.pattern(/^\\d{10}$/)]),\n      role: new FormControl('user', Validators.required)\n    });\n    this.role1 = ['ROLE_SERVCIE_PROVIDER'];\n    this.role2 = ['ROLE_USER'];\n    this.role3 = ['ROLE_ADMIN'];\n    this.showAlert = false;\n  }\n  ngOnInit() {}\n  ngOnChanges(changes) {\n    this.user2 = this.user1;\n  }\n  saveUser() {\n    if (this.userAuthService.roleMatch(['ROLE_ADMIN'])) {\n      this.updateUserByAdmin();\n    } else {\n      this.updateUserbyUser();\n    }\n  }\n  updateUserByAdmin() {\n    if (this.user.valid) {\n      const existingUser = {\n        username: this.user.value.username,\n        email: this.user.value.email,\n        password: this.user.value.password,\n        phoneNo: this.user.value.phoneNo,\n        roles: [this.user.value.role]\n      };\n      this.userService.updateUserByAdmin(existingUser, this.user1.id).subscribe(response => {\n        console.log(existingUser);\n        console.log(response);\n        this.showAlert = true;\n        this.toastr.success(`User updated successfully!`, 'Success');\n      }, error => {\n        this.toastr.error('Error updating user!', 'Error');\n        console.log(error);\n      });\n    }\n  }\n  updateUserbyUser() {\n    if (this.user.valid) {\n      const existingUser = new User();\n      // if (this.user1.roles == 'ROLE_SERVICE_PROVIDER') {\n      //   existingUser.roles = ['provider'];\n      // } else {\n      //   existingUser.roles = ['user'];\n      // }\n      existingUser.username = this.user.value.username, existingUser.email = this.user.value.email, existingUser.password = this.user.value.password, existingUser.phoneNo = this.user.value.phoneNo, this.userService.updateUser(existingUser, this.user1.id).subscribe(response => {\n        console.log(existingUser);\n        console.log(response);\n        this.showAlert = true;\n        this.toastr.success(`User updated successfully!`, 'Success');\n        this.logout();\n      }, error => {\n        this.toastr.error('Error updating user!', 'Error');\n        console.log(error);\n      });\n    }\n  }\n  logout() {\n    this.userAuthService.clear();\n    // this.router.navigate(['/login']);\n    // this.toastr.warning('Logging Out !');\n  }\n};\n\n__decorate([Input()], EditUserComponent.prototype, \"user1\", void 0);\nEditUserComponent = __decorate([Component({\n  selector: 'app-edit-user',\n  templateUrl: './edit-user.component.html',\n  styleUrls: ['./edit-user.component.css']\n})], EditUserComponent);\nexport { EditUserComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}