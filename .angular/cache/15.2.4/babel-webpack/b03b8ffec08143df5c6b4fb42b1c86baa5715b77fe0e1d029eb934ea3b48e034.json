{"ast":null,"code":"import { Chart, registerables } from 'node_modules/chart.js';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/user.service\";\nimport * as i2 from \"src/app/services/service.service\";\nChart.register(...registerables);\nexport let SummaryComponent = /*#__PURE__*/(() => {\n  class SummaryComponent {\n    constructor(userService, serviceService) {\n      this.userService = userService;\n      this.serviceService = serviceService;\n      this.labeldata = ['Admin', 'Users', 'Providers'];\n      this.realdata = [];\n      this.colordata = ['#E23E57', '#2ed12e', '#19A7CE'];\n    }\n    ngOnInit() {\n      this.userChart();\n    }\n    userChart() {\n      this.userService.getUsers().subscribe(response => {\n        this.chartdata = response;\n        console.log(response);\n        if (this.chartdata != null) {\n          let adminCount = 0;\n          let userCount = 0;\n          let providerCount = 0;\n          for (let i = 0; i < response.length; i++) {\n            if (this.chartdata[i].roles[0].name == 'ROLE_ADMIN') {\n              adminCount = adminCount + 1;\n            } else if (this.chartdata[i].roles[0].name == 'ROLE_SERVICE_PROVIDER') {\n              providerCount = providerCount + 1;\n            } else {\n              userCount = userCount + 1;\n            }\n          }\n          this.realdata.push(adminCount);\n          this.realdata.push(userCount);\n          this.realdata.push(providerCount);\n        }\n        this.RenderChart(this.labeldata, this.realdata, this.colordata, 'bar', 'barchart');\n        this.RenderChart(this.labeldata, this.realdata, this.colordata, 'pie', 'piechart');\n        this.RenderChart(this.labeldata, this.realdata, this.colordata, 'doughnut', 'dochart');\n        this.RenderChart(this.labeldata, this.realdata, this.colordata, 'polarArea', 'pochart');\n        this.RenderChart(this.labeldata, this.realdata, this.colordata, 'radar', 'rochart');\n      });\n    }\n    serviceChart() {\n      this.userService.getUsers().subscribe(response => {\n        this.chartdata = response;\n        console.log(response);\n        if (this.chartdata != null) {\n          let adminCount = 0;\n          let userCount = 0;\n          let providerCount = 0;\n          for (let i = 0; i < response.length; i++) {\n            if (this.chartdata[i].roles[0].name == 'ROLE_ADMIN') {\n              adminCount = adminCount + 1;\n            } else if (this.chartdata[i].roles[0].name == 'ROLE_SERVICE_PROVIDER') {\n              providerCount = providerCount + 1;\n            } else {\n              userCount = userCount + 1;\n            }\n          }\n          this.realdata.push(adminCount);\n          this.realdata.push(userCount);\n          this.realdata.push(providerCount);\n        }\n        this.RenderChart(this.labeldata, this.realdata, this.colordata, 'bar', 'barchart');\n        this.RenderChart(this.labeldata, this.realdata, this.colordata, 'pie', 'piechart');\n        this.RenderChart(this.labeldata, this.realdata, this.colordata, 'doughnut', 'dochart');\n        this.RenderChart(this.labeldata, this.realdata, this.colordata, 'polarArea', 'pochart');\n        this.RenderChart(this.labeldata, this.realdata, this.colordata, 'radar', 'rochart');\n      });\n    }\n    RenderChart(labeldata, maindata, colordata, type, id) {\n      const myChart = new Chart(id, {\n        type: type,\n        data: {\n          labels: labeldata,\n          datasets: [{\n            label: 'User types',\n            data: maindata,\n            backgroundColor: colordata,\n            borderColor: ['rgba(255, 99, 132, 1)'],\n            borderWidth: 1\n          }]\n        },\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    }\n  }\n  SummaryComponent.ɵfac = function SummaryComponent_Factory(t) {\n    return new (t || SummaryComponent)(i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.ServiceService));\n  };\n  SummaryComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SummaryComponent,\n    selectors: [[\"app-summary\"]],\n    decls: 11,\n    vars: 0,\n    consts: [[1, \"container\"], [1, \"d-flex\", \"justify-content-center\", \"align-items-center\", 2, \"height\", \"100vh\"], [1, \"row\"], [1, \"col-lg-5\"], [\"id\", \"barchart\"], [\"id\", \"piechart\"]],\n    template: function SummaryComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h2\");\n        i0.ɵɵtext(5, \"Users of the system\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"canvas\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 3)(8, \"h2\");\n        i0.ɵɵtext(9, \"Rated & unrated services \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"canvas\", 5);\n        i0.ɵɵelementEnd()()()();\n      }\n    }\n  });\n  return SummaryComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}