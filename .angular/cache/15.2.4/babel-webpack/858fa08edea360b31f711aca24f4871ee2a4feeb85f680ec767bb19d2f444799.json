{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet EditServiceComponent = class EditServiceComponent {\n  constructor(serviceService, userAuthService, toastr) {\n    this.serviceService = serviceService;\n    this.userAuthService = userAuthService;\n    this.toastr = toastr;\n    this.service = new FormGroup({\n      name: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(50)]),\n      description: new FormControl('', [Validators.required, Validators.minLength(10), Validators.maxLength(500)]),\n      phoneNo: new FormControl('', [Validators.required, Validators.pattern(/^\\d{10}$/)]),\n      averageRating: new FormControl('', [Validators.pattern('^(10|[0-9](\\.[0-9])?)$')])\n    });\n  }\n  ngOnInit() {}\n  saveService() {\n    if (this.userAuthService.roleMatch(['ROLE_ADMIN'])) {\n      this.updateServiceByAdmin();\n    } else {\n      this.updateServicebyProvider();\n    }\n  }\n  updateServiceByAdmin() {\n    if (this.service.valid) {\n      const existingService = {\n        name: this.service.value.name,\n        description: this.service.value.description,\n        phoneNo: this.service.value.phoneNo,\n        averageRating: parseFloat(this.service.value.averageRating)\n      };\n      this.serviceService.updateServiceByAdmin(this.service1.id, existingService).subscribe(resonse => {\n        console.log(existingService);\n        const createdService = resonse;\n        this.toastr.success(`Service ${createdService.name} created successfully!`, 'Success');\n      }, error => {\n        this.toastr.error('Error creating service!', 'Error');\n        console.log(error);\n      });\n    } else {\n      this.toastr.error('Service details are invalid !', 'Error');\n    }\n  }\n  updateServicebyProvider() {\n    if (this.service.valid) {\n      const existingService = {\n        name: this.service.value.name,\n        description: this.service.value.description,\n        phoneNo: this.service.value.phoneNo\n      };\n      this.serviceService.updateService(this.service1.id, existingService).subscribe(resonse => {\n        console.log(existingService);\n        const createdService = resonse;\n        this.toastr.success(`Service ${createdService.name} created successfully!`, 'Success');\n      }, error => {\n        this.toastr.error('Error creating service!', 'Error');\n        console.log(error);\n      });\n    } else {\n      this.toastr.error('Service details are invalid !', 'Error');\n    }\n  }\n};\n__decorate([Input()], EditServiceComponent.prototype, \"service1\", void 0);\nEditServiceComponent = __decorate([Component({\n  selector: 'app-edit-service',\n  templateUrl: './edit-service.component.html',\n  styleUrls: ['./edit-service.component.css']\n})], EditServiceComponent);\nexport { EditServiceComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}